/*
LAB2.1: (SECTION	9: DATA	STRUCTURES. MODERN	OPERATORS	AND	STRINGS	> CODING	
CHANLLENGE	#3)
H√£y ti·∫øp t·ª•c v·ªõi app ƒë·∫∑t c∆∞·ª£c c·ªßa ch√∫ng ta! L√∫c n√†y, ch√∫ng ta c√≥ 1 m·∫£ng k·∫øt h·ª£p
theo d·∫°ng [key,value] t∆∞∆°ng ·ª©ng v·ªõi nh·ªØng ƒëo·∫°n log ghi l·∫°i nh·ªØng s·ª± ki·ªán x·∫£y ra
trong tr·∫≠n ƒë·∫•u.
Trong ƒë√≥:
-> key = ph√∫t di·ªÖn ra
-> value = t√™n h√†nh ƒë·ªông di·ªÖn ra (ghi b√†n, thay ng∆∞·ªùi, nh·∫≠n th·∫ª ƒë·ªè,...)
B√¢y gi·ªù ch√∫ng ta c√≥ 1 m·∫£ng li√™n k·∫ø g·ªìm c√°c s·ª± ki·ªán x·∫£y ra trong tr·∫≠n ƒë·∫•u c√πng
th·ªùi gian t∆∞∆°ng ·ª©ng
1. H√£y t·∫°o ra 1 m·∫£ng c√°c s·ª± ki·ªán kh√°c nhau x·∫£y ra trong su·ªët tr·∫≠n ƒë·∫•u (l∆∞u √Ω l√†
kh√¥ng tr√πng nhau)
2. Sau khi tr√≤ ch∆°i k·∫øt th√∫c, ph√°t hi·ªán ra r·∫±ng th·∫ª v√†ng ph√∫t 64 l√† kh√¥ng ƒë√∫ng. H√£y
x√≥a n√≥ kh·ªèi danh s√°ch s·ª± ki·ªán trong tr·∫≠n ƒë·∫•u.
3. In ra console theo ƒë·ªãnh dang nh∆∞ sau:"1 s·ª± ki·ªán x·∫£y ra, trung b√¨nh m·ªói 9 ph√∫t".
L∆∞u √Ω rƒÉng m·ªói tr·∫≠n ƒë·∫•u c√≥ 90 ph√∫t.
4. L·∫∑p to√†n b·ªô m·∫£ng s·ª± ki·ªán v√† in ra m√†n h√¨nh, ƒë√°nh d·∫•u ƒë·ªëi v·ªõi m·ªói s·ª± ki·ªán trong
tr·∫≠n ƒë·∫•u di·ªÖn ra trong hi·ªáp 1 hay hi·ªáp 2,
V√≠ d·ª•: [FIRST HALF] 17: ‚öΩ GOAL
LAB2.2: (SECTION	9: DATA	STRUCTURES. MODERN	OPERATORS	AND	STRINGS	> CODING	
CHANLLENGE	#4)
Vi·∫øt 1 ch∆∞∆°ng tr√¨nh nh·∫≠n v√†o 1 danh s√°ch c√°c bi·∫øn ƒë∆∞·ª£c vi·∫øt theo ki·ªÉu
underscore (v√≠ d·ª•: ten_bien) v√† chuy·ªÉn n√≥ sang d·∫°ng camelCase (v√≠ d·ª•: tenBien)
ƒê·∫ßu v√†o s·∫Ω ƒë·∫øn t·ª´ m·ªôt v√πng vƒÉn b·∫£n ƒë∆∞·ª£c ch√®n v√†o DOM (xem m√£ b√™n d∆∞·ªõi) v√†
chuy·ªÉn ƒë·ªïi s·∫Ω x·∫£y ra khi nh·∫•n n√∫t.
- D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu ƒë·∫ßu v√†o c·∫ßn test:
underscore_case
first_name
Some_Variable
calculate_AGE
delayed_departure
- ƒê·∫ßu ra mong mu·ªën (H√£y log c√°c k·∫øt qu·∫£ n√†y ra m√†n h√¨nh ƒë·ªÉ ƒë·ªëi chi·∫øu v·ªõi
k·∫øt qu·∫£ ph√≠a d∆∞·ªõi)
underscoreCase ‚úÖ
firstName ‚úÖ‚úÖ
someVariable ‚úÖ‚úÖ‚úÖ
calculateAge ‚úÖ‚úÖ‚úÖ‚úÖ
delayedDeparture ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ
L∆∞u √Ω 1: H√£y l∆∞u √Ω r·∫±ng k√Ω t·ª± n√†o xu·∫•t hi·ªán 1 k√Ω t·ª± xu·ªëng d√≤ng "\n" trong ƒëo·∫°n
text üòâ
L∆∞u √Ω 2: Gi·∫£i ph√°p ƒë∆°n gi·∫£n cho ph·∫ßn n√†y l√† t√°ch ra 2 t·ª´ t·ª´ k√Ω t·ª± ƒë·∫ßu v√†o v√≠ d·ª•:
("a_b" -> "a" v√† "b")
L∆∞u √Ω 3: ƒê·ª´ng ƒë·ªÉ √Ω v·ªÅ d·∫•u tick kia ‚úÖ. V·∫•n ƒë·ªÅ s·∫Ω ƒë∆∞·ª£c gi·∫£i quy·∫øt khi b·∫°n chuy·ªÉn
ƒë·ªïi üòâ
L∆∞u √Ω 4: Th·ª≠ th√°ch n√†y c√≥ th·ªÉ s·∫Ω kh√≥ v·ªõi b·∫°n, v√¨ v·∫≠y h√£y b·∫Øt ƒë·∫ßu xem c√°ch gi·∫£i
trong tr∆∞·ªùng h·ª£p c·∫£m th·∫•y kh√¥ng c√≥ h∆∞·ªõng gi·∫£i quy·∫øt.
Sau c√πng, h√£y test c√°c k·∫øt qu·∫£ ƒë·∫ßu v√†o c·ªßa b·∫°n xem c√≥ ƒë√∫ng kh√¥ng ?
LAB2.3: (SECTION	9: DATA	STRUCTURES. MODERN	OPERATORS	AND	STRINGS	> STRING	
METHOD	PRACTICE)
Th·ª±c hi·ªán code v√≠ d·ª• sau
// String Methods Practice
const flights =
'_Delayed_Departure;fao93766109;txl2133758440;11:25+_Arrival;bru0943384722;fao937661
09;11:45+_Delayed_Arrival;hel7439299980;fao93766109;12:05+_Departure;fao93766109;lis
2323639855;12:30';
// üî¥ Delayed Departure from FAO to TXL (11h25)
// Arrival from BRU to FAO (11h45)
// üî¥ Delayed Arrival from HEL to FAO (12h05)
// Departure from FAO to LIS (12h30)
const getCode = str => str.slice(0, 3).toUpperCase();
for (const flight of flights.split('+')) {
const [type, from, to, time] = flight.split(';');
const output = `${type.startsWith('_Delayed') ? 'üî¥' : ''}${type.replaceAll(
'_',
' '
)} ${getCode(from)} ${getCode(to)} (${time.replace(':', 'h')})`.padStart(36);
console.log(output);
}
LAB2.4: (SECTION	10: A CLOSER	LOOK	AT	FUNCTIONS	> CODING	CHANLLENGE	#2)
L·∫•y h√†m IIFE d∆∞·ªõi ƒë√¢y, v√† ·ªü cu·ªëi function h√£y g·∫Øn 1 event thay ƒë·ªïi m√†u c·ªßa th·∫ª
'h1' sang m√†u xanh d∆∞∆°ng (blue) sau m·ªói l·∫ßn click v√†o element body. Ch√∫ng ta
kh√¥ng select ƒë·∫øn th·∫ª h1 ƒë√≥ n·ªØa!
V√† sau ƒë√≥ h√£y t·ª± gi·∫£i th√≠ch l·∫°i cho ch√≠nh m√¨nh ho·∫∑c b·∫°n h·ªçc c·ªßa m√¨nh T·∫°i sao n√≥
l·∫°i ho·∫°t ƒë·ªông!
H√£y b√¨nh tƒ©nh nghƒ© xem ch√≠nh x√°c th√¨ khi n√†o callback ƒë∆∞·ª£c th·ª±c thi, v√† bi·∫øn ƒë∆∞·ª£c
s·ª≠ d·ª•ng trong v√≠ d·ª• n√†y c√≥ √Ω nghƒ©a g√¨?.
(function () {
  const header = document.querySelector('h1');
  header.style.color = 'red';
  document.querySelector('body').addEventListener('click', function () {
  header.style.color = 'blue';
});
})();
*/
const game = {
  team1: "Bayern Munich",
  team2: "Borrussia Dortmund",
  players: [
    [
      "Neuer",
      "Pavard",
      "Martinez",
      "Alaba",
      "Davies",
      "Kimmich",
      "Goretzka",
      "Coman",
      "Muller",
      "Gnarby",
      "Lewandowski",
    ],
    [
      "Burki",
      "Schulz",
      "Hummels",
      "Akanji",
      "Hakimi",
      "Weigl",
      "Hazard",
      "Brandt",
      "Sancho",
      "Gotze",
    ],
  ],
  score: "4:0",
  scored: ["Lewandowski", "Gnarby", "Lewandowski", "Hummels"],
  date: "Nov 9th, 2037",
  odds: {
    team1: 1.33,
    x: 3.25,
    team2: 6.5,
  },
};
// 1.
for (const [i, player] of game.scored.entries()) {
  console.log(`Goal ${i + 1}: ${player}`);
}
// 2.
const odds = Object.values(game.odds);
let average = 0;
for (const odd of odds) average += odd;
average /= odds.length;
console.log(average);

// 3.
for (const [team, odd] of Object.entries(game.odds)) {
  const teamStr = team === "x" ? "draw" : `victory ${game[team]}`;
  console.log(`Odd of ${teamStr} ${odd} `);
}
